trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: build_and_test_all_samples
  displayName: 'Build and Test All Client Samples'
  variables:
    awsRegion: 'us-east-1'
    ecrRepository: 'fluent-restful-nightly'
    imageTag: 'latest'
    containerName: 'fluent-restful-server'
    webserverUrl: 'http://localhost:8080'

  steps:
  # STEP 1: CHECKOUT CODE
  - checkout: self

  # STEP 2A: Write the script logic to a file
  - bash: |
      # This command block writes everything between <<'EOF' and EOF into a new file.
      cat > ./run_docker_steps.sh <<'EOF'
      #!/bin/bash
      # Exit immediately if a command fails
      set -e

      echo "Getting AWS Account ID..."
      AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      
      IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/fluent-restful-nightly:latest"

      echo "Logging in to ECR..."
      aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com"
      
      echo "Pulling image: $IMAGE_URI"
      docker pull "$IMAGE_URI"

      echo "Starting container with image: $IMAGE_URI"
      docker run -d --name fluent-restful-server -p 8080:8080 "$IMAGE_URI"
      
      echo "Waiting for the server to be ready..."
      timeout=100
      while ! curl -s --fail http://localhost:8080/v2/version; do
        sleep 5
        timeout=$(($timeout - 5))
        if [ $timeout -le 0 ]; then
          echo "Error: Server did not become ready in time."
          docker logs fluent-restful-server
          exit 1
        fi
        echo "Still waiting..."
      done
      echo "âœ… Server is up and running!"
      EOF
    displayName: 'Create Docker Steps Script'

  # STEP 2B: Execute the script file with AWS credentials
  - task: AWSShellScript@1
    displayName: 'Login, Pull from ECR, and Start Server'
    inputs:
      awsCredentials: 'AWS ECR'
      regionName: $(awsRegion)
      # Tell the task to execute the file we just created
      filePath: './run_docker_steps.sh'

  # STEP 3: BUILD AND TEST .NET
  - script: |
      sed -i 's|\[YOUR_RESTFUL_SERVER\]|$(webserverUrl)|g' "RESTful Engine/Client Code/v2 API/RESTful-Client-.NET-Sample/RESTful-Client-.NET-Sample/App.config"
      echo "Verifying App.config:"
      cat "RESTful Engine/Client Code/v2 API/RESTful-Client-.NET-Sample/RESTful-Client-.NET-Sample/App.config"
    displayName: 'Update & Verify .NET App.config'

  - task: DotNetCoreCLI@2
    displayName: 'Build .NET Sample'
    inputs:
      command: 'build'
      projects: 'RESTful Engine/Client Code/v2 API/RESTful-Client-.NET-Sample/**/*.csproj'

  - script: |
      # 1. Change to the directory where the compiled .exe/.dll is
      cd "RESTful Engine/Client Code/v2 API/RESTful-Client-.NET-Sample/RESTful-Client-.NET-Sample/bin/Debug/net8.0"

      # 2. Execute the compiled application directly
      dotnet RESTful-Client-.NET-Sample.dll
    displayName: 'Run .NET Sample from output directory'
  # - task: DotNetCoreCLI@2
  #   displayName: 'Run .NET Sample'
  #   inputs:
  #     command: 'run'
  #     projects: 'RESTful Engine/Client Code/v2 API/RESTful-Client-.NET-Sample/**/*.csproj'

  # STEP 4: BUILD AND TEST JAVA
  - script: |
      sed -i 's|\[YOUR_RESTFUL_SERVER\]|$(webserverUrl)|g' "RESTful Engine/Client Code/v2 API/RESTful-Client-Java-Sample/src/main/resources/application.properties"
      echo "Verifying application.properties:"
      cat "RESTful Engine/Client Code/v2 API/RESTful-Client-Java-Sample/src/main/resources/application.properties"
    displayName: 'Update & Verify Java application.properties'

  - task: Maven@3
    displayName: 'Build and Run Java Sample'
    inputs:
      mavenPomFile: 'RESTful Engine/Client Code/v2 API/RESTful-Client-Java-Sample/pom.xml'
      goals: 'package exec:java'

  # # STEP 5: BUILD AND TEST JAVASCRIPT
  # - script: |
  #     sed -i 's|\[YOUR_RESTFUL_SERVER\]|$(webserverUrl)|g' "RESTful Engine/Client Code/v2 API/RESTful-Client-JavaScript-Sample/config.json"
  #   displayName: 'Update JavaScript config.json'

  # - script: |
  #     cd "RESTful Engine/Client Code/v2 API/RESTful-Client-JavaScript-Sample"
  #     npm install
  #     npm start
  #   displayName: 'Run JavaScript Project'

  # # STEP 6: BUILD AND TEST PYTHON
  # - task: UsePythonVersion@0
  #   inputs:
  #     versionSpec: '3.x'
  #   displayName: 'Use Python 3.x'

  # - script: |
  #     sed -i 's|\[YOUR_RESTFUL_SERVER\]|$(webserverUrl)|g' "RESTful Engine/Client Code/v2 API/RESTful-Client-Python-Sample/config.ini"
  #   displayName: 'Update Python config.ini'

  # - script: |
  #     cd "RESTful Engine/Client Code/v2 API/RESTful-Client-Python-Sample"
  #     pip install -r requirements.txt
  #     python main.py
  #   displayName: 'Run Python Project'