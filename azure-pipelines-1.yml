trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: build_and_test_all_samples
  displayName: 'Build and Test All Client Samples'
  variables:
    dockerImage: 'public.ecr.aws/apryse/fluent-restful:latest'
    containerName: 'fluent-restful-server'
    webserverUrl: 'http://localhost:8080' # The server is always on localhost for this job

  steps:
  # STEP 1: CHECKOUT CODE (only needed once)
  - checkout: self

  # STEP 2: START THE SERVER AND RUN A HEALTH CHECK
  - script: |
      echo "Starting the Fluent RESTful server in the background..."
      docker pull $(dockerImage)
      docker run -d --name $(containerName) -p 8080:8080 $(dockerImage)
      
      echo "Waiting for the server to be ready..."
      timeout=100
      while ! curl -s --fail $(webserverUrl)/v2/version; do
        sleep 5
        timeout=$(($timeout - 5))
        if [ $timeout -le 0 ]; then
          echo "Error: Server did not become ready in time."
          docker logs $(containerName) # Print logs for debugging
          exit 1
        fi
        echo "Still waiting..."
      done
      echo "âœ… Server is up and running!"
    displayName: 'Start Server & Wait for Health Check'

  # STEP 3: BUILD AND TEST .NET
  - script: |
      sed -i 's|\[YOUR_RESTFUL_SERVER\]|$(webserverUrl)|g' "RESTful Engine/Client Code/v2 API/RESTful-Client-.NET-Sample/RESTful-Client-.NET-Sample/App.config"
      echo "Verifying App.config:"
      cat "RESTful Engine/Client Code/v2 API/RESTful-Client-.NET-Sample/RESTful-Client-.NET-Sample/App.config"
    displayName: 'Update & Verify .NET App.config'

  - task: DotNetCoreCLI@2
    displayName: 'Build .NET Sample'
    inputs:
      command: 'build'
      projects: 'RESTful Engine/Client Code/v2 API/RESTful-Client-.NET-Sample/**/*.csproj'

  - script: |
      # 1. Change to the directory where the compiled .exe/.dll is
      cd RESTful Engine/Client Code/v2 API/RESTful-Client-.NET-Sample/RESTful-Client-.NET-Sample/bin/Debug/net8.0

      # 2. Execute the compiled application directly
      dotnet RESTful-Client-.NET-Sample.dll
    displayName: 'Run .NET Sample from output directory'
  # - task: DotNetCoreCLI@2
  #   displayName: 'Run .NET Sample'
  #   inputs:
  #     command: 'run'
  #     projects: 'RESTful Engine/Client Code/v2 API/RESTful-Client-.NET-Sample/**/*.csproj'

  # STEP 4: BUILD AND TEST JAVA
  - script: |
      sed -i 's|\[YOUR_RESTFUL_SERVER\]|$(webserverUrl)|g' "RESTful Engine/Client Code/v2 API/RESTful-Client-Java-Sample/src/main/resources/application.properties"
      echo "Verifying application.properties:"
      cat "RESTful Engine/Client Code/v2 API/RESTful-Client-Java-Sample/src/main/resources/application.properties"
    displayName: 'Update & Verify Java application.properties'

  - task: Maven@3
    displayName: 'Build and Run Java Sample'
    inputs:
      mavenPomFile: 'RESTful Engine/Client Code/v2 API/RESTful-Client-Java-Sample/pom.xml'
      goals: 'package exec:java'

  # # STEP 5: BUILD AND TEST JAVASCRIPT
  # - script: |
  #     sed -i 's|\[YOUR_RESTFUL_SERVER\]|$(webserverUrl)|g' "RESTful Engine/Client Code/v2 API/RESTful-Client-JavaScript-Sample/config.json"
  #   displayName: 'Update JavaScript config.json'

  # - script: |
  #     cd "RESTful Engine/Client Code/v2 API/RESTful-Client-JavaScript-Sample"
  #     npm install
  #     npm start
  #   displayName: 'Run JavaScript Project'

  # # STEP 6: BUILD AND TEST PYTHON
  # - task: UsePythonVersion@0
  #   inputs:
  #     versionSpec: '3.x'
  #   displayName: 'Use Python 3.x'

  # - script: |
  #     sed -i 's|\[YOUR_RESTFUL_SERVER\]|$(webserverUrl)|g' "RESTful Engine/Client Code/v2 API/RESTful-Client-Python-Sample/config.ini"
  #   displayName: 'Update Python config.ini'

  # - script: |
  #     cd "RESTful Engine/Client Code/v2 API/RESTful-Client-Python-Sample"
  #     pip install -r requirements.txt
  #     python main.py
  #   displayName: 'Run Python Project'